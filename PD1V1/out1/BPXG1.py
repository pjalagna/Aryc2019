
class BPXG1Class ():
  """ all the code below was generated by The Turing-Church point Builder program (V2.05.01 of AlagnaRythms Inc (Aryc) 2011 
      on Mon Jul 22 02:13:04 2013 

      From the point diagram file basii.point.txt
  """

  def main(self,objj,trace):
    retbox = [0,objj,trace]
    objj['trace'] = self.trace
    if trace == 1:
        xx = objj['trace']( 'Begin BPXG1' , objj) 
    ctl = 1 # always begins at 1
    while 0 < ctl:
      if trace == 1:
        xx = objj['trace']  ( 'in loop -BPXG1.' + ctl.__str__() ,objj )
      if ctl == 1:
        xx = self.BPXG1_init(objj,trace)
        ctl = 2 # init always leads to 2
      elif ctl == 10000: # dump fixed as cell 10000
        retbox = self.dump(objj,trace)
        ctl = retbox[0]
      
      elif ctl == 215:
        retbox = self.BPXG1_proc215(objj,trace) # always returns an array with [0]== status
        ctl = retbox[0]
      
      elif ctl == 9200:
        retbox = self.BPXG1_proc9200(objj,trace) # always returns an array with [0]== status
        ctl = retbox[0]
      
      elif ctl == 210:
        retbox = self.BPXG1_proc210(objj,trace) # always returns an array with [0]== status
        ctl = retbox[0]
      
      elif ctl == 227:
        retbox = self.BPXG1_proc227(objj,trace) # always returns an array with [0]== status
        ctl = retbox[0]
      
      elif ctl == 130:
        retbox = self.BPXG1_proc130(objj,trace) # always returns an array with [0]== status
        ctl = retbox[0]
      
      elif ctl == 225:
        retbox = self.BPXG1_proc225(objj,trace) # always returns an array with [0]== status
        ctl = retbox[0]
      
      elif ctl == 4:
        retbox = self.BPXG1_proc4(objj,trace) # always returns an array with [0]== status
        ctl = retbox[0]
      
      elif ctl == 400:
        retbox = self.BPXG1_proc400(objj,trace) # always returns an array with [0]== status
        ctl = retbox[0]
      
      elif ctl == 8:
        retbox = self.BPXG1_proc8(objj,trace) # always returns an array with [0]== status
        ctl = retbox[0]
      
      elif ctl == 285:
        retbox = self.BPXG1_proc285(objj,trace) # always returns an array with [0]== status
        ctl = retbox[0]
      
      elif ctl == 286:
        retbox = self.BPXG1_proc286(objj,trace) # always returns an array with [0]== status
        ctl = retbox[0]
      
      elif ctl == 120:
        retbox = self.BPXG1_proc120(objj,trace) # always returns an array with [0]== status
        ctl = retbox[0]
      
      elif ctl == 3131:
        retbox = self.BPXG1_proc3131(objj,trace) # always returns an array with [0]== status
        ctl = retbox[0]
      
      elif ctl == 3200:
        retbox = self.BPXG1_proc3200(objj,trace) # always returns an array with [0]== status
        ctl = retbox[0]
      
      elif ctl == 51:
        retbox = self.BPXG1_proc51(objj,trace) # always returns an array with [0]== status
        ctl = retbox[0]
      
      elif ctl == 50:
        retbox = self.BPXG1_proc50(objj,trace) # always returns an array with [0]== status
        ctl = retbox[0]
      
      elif ctl == 52:
        retbox = self.BPXG1_proc52(objj,trace) # always returns an array with [0]== status
        ctl = retbox[0]
      
      elif ctl == 410:
        retbox = self.BPXG1_proc410(objj,trace) # always returns an array with [0]== status
        ctl = retbox[0]
      
      elif ctl == 2251:
        retbox = self.BPXG1_proc2251(objj,trace) # always returns an array with [0]== status
        ctl = retbox[0]
      
      elif ctl == 2250:
        retbox = self.BPXG1_proc2250(objj,trace) # always returns an array with [0]== status
        ctl = retbox[0]
      
      elif ctl == 310:
        retbox = self.BPXG1_proc310(objj,trace) # always returns an array with [0]== status
        ctl = retbox[0]
      
      elif ctl == 315:
        retbox = self.BPXG1_proc315(objj,trace) # always returns an array with [0]== status
        ctl = retbox[0]
      
      elif ctl == 82:
        retbox = self.BPXG1_proc82(objj,trace) # always returns an array with [0]== status
        ctl = retbox[0]
      
      elif ctl == 80:
        retbox = self.BPXG1_proc80(objj,trace) # always returns an array with [0]== status
        ctl = retbox[0]
      
      elif ctl == 81:
        retbox = self.BPXG1_proc81(objj,trace) # always returns an array with [0]== status
        ctl = retbox[0]
      
      elif ctl == 86:
        retbox = self.BPXG1_proc86(objj,trace) # always returns an array with [0]== status
        ctl = retbox[0]
      
      elif ctl == 87:
        retbox = self.BPXG1_proc87(objj,trace) # always returns an array with [0]== status
        ctl = retbox[0]
      
      elif ctl == 85:
        retbox = self.BPXG1_proc85(objj,trace) # always returns an array with [0]== status
        ctl = retbox[0]
      
      elif ctl == 3:
        retbox = self.BPXG1_proc3(objj,trace) # always returns an array with [0]== status
        ctl = retbox[0]
      
      elif ctl == 7:
        retbox = self.BPXG1_proc7(objj,trace) # always returns an array with [0]== status
        ctl = retbox[0]
      
      elif ctl == 301:
        retbox = self.BPXG1_proc301(objj,trace) # always returns an array with [0]== status
        ctl = retbox[0]
      
      elif ctl == 420:
        retbox = self.BPXG1_proc420(objj,trace) # always returns an array with [0]== status
        ctl = retbox[0]
      
      elif ctl == 300:
        retbox = self.BPXG1_proc300(objj,trace) # always returns an array with [0]== status
        ctl = retbox[0]
      
      elif ctl == 302:
        retbox = self.BPXG1_proc302(objj,trace) # always returns an array with [0]== status
        ctl = retbox[0]
      
      elif ctl == 3151:
        retbox = self.BPXG1_proc3151(objj,trace) # always returns an array with [0]== status
        ctl = retbox[0]
      
      elif ctl == 3150:
        retbox = self.BPXG1_proc3150(objj,trace) # always returns an array with [0]== status
        ctl = retbox[0]
      
      elif ctl == 511:
        retbox = self.BPXG1_proc511(objj,trace) # always returns an array with [0]== status
        ctl = retbox[0]
      
      elif ctl == 510:
        retbox = self.BPXG1_proc510(objj,trace) # always returns an array with [0]== status
        ctl = retbox[0]
      
      elif ctl == 430:
        retbox = self.BPXG1_proc430(objj,trace) # always returns an array with [0]== status
        ctl = retbox[0]
      
      elif ctl == 61:
        retbox = self.BPXG1_proc61(objj,trace) # always returns an array with [0]== status
        ctl = retbox[0]
      
      elif ctl == 62:
        retbox = self.BPXG1_proc62(objj,trace) # always returns an array with [0]== status
        ctl = retbox[0]
      
      elif ctl == 63:
        retbox = self.BPXG1_proc63(objj,trace) # always returns an array with [0]== status
        ctl = retbox[0]
      
      elif ctl == 250:
        retbox = self.BPXG1_proc250(objj,trace) # always returns an array with [0]== status
        ctl = retbox[0]
      
      elif ctl == 2:
        retbox = self.BPXG1_proc2(objj,trace) # always returns an array with [0]== status
        ctl = retbox[0]
      
      elif ctl == 6:
        retbox = self.BPXG1_proc6(objj,trace) # always returns an array with [0]== status
        ctl = retbox[0]
      
      elif ctl == 500:
        retbox = self.BPXG1_proc500(objj,trace) # always returns an array with [0]== status
        ctl = retbox[0]
      
      elif ctl == 750:
        retbox = self.BPXG1_proc750(objj,trace) # always returns an array with [0]== status
        ctl = retbox[0]
      
      elif ctl == 91:
        retbox = self.BPXG1_proc91(objj,trace) # always returns an array with [0]== status
        ctl = retbox[0]
      
      elif ctl == 90:
        retbox = self.BPXG1_proc90(objj,trace) # always returns an array with [0]== status
        ctl = retbox[0]
      
      elif ctl == 93:
        retbox = self.BPXG1_proc93(objj,trace) # always returns an array with [0]== status
        ctl = retbox[0]
      
      elif ctl == 92:
        retbox = self.BPXG1_proc92(objj,trace) # always returns an array with [0]== status
        ctl = retbox[0]
      
      elif ctl == 95:
        retbox = self.BPXG1_proc95(objj,trace) # always returns an array with [0]== status
        ctl = retbox[0]
      
      elif ctl == 220:
        retbox = self.BPXG1_proc220(objj,trace) # always returns an array with [0]== status
        ctl = retbox[0]
      
      elif ctl == 11:
        retbox = self.BPXG1_proc11(objj,trace) # always returns an array with [0]== status
        ctl = retbox[0]
      
      elif ctl == 10:
        retbox = self.BPXG1_proc10(objj,trace) # always returns an array with [0]== status
        ctl = retbox[0]
      
      elif ctl == 13:
        retbox = self.BPXG1_proc13(objj,trace) # always returns an array with [0]== status
        ctl = retbox[0]
      
      elif ctl == 12:
        retbox = self.BPXG1_proc12(objj,trace) # always returns an array with [0]== status
        ctl = retbox[0]
      
      elif ctl == 15:
        retbox = self.BPXG1_proc15(objj,trace) # always returns an array with [0]== status
        ctl = retbox[0]
      
      elif ctl == 14:
        retbox = self.BPXG1_proc14(objj,trace) # always returns an array with [0]== status
        ctl = retbox[0]
      
      elif ctl == 17:
        retbox = self.BPXG1_proc17(objj,trace) # always returns an array with [0]== status
        ctl = retbox[0]
      
      elif ctl == 16:
        retbox = self.BPXG1_proc16(objj,trace) # always returns an array with [0]== status
        ctl = retbox[0]
      
      elif ctl == 18:
        retbox = self.BPXG1_proc18(objj,trace) # always returns an array with [0]== status
        ctl = retbox[0]
      
      elif ctl == 2100:
        retbox = self.BPXG1_proc2100(objj,trace) # always returns an array with [0]== status
        ctl = retbox[0]
      
      elif ctl == 4200:
        retbox = self.BPXG1_proc4200(objj,trace) # always returns an array with [0]== status
        ctl = retbox[0]
      
      elif ctl == 3104:
        retbox = self.BPXG1_proc3104(objj,trace) # always returns an array with [0]== status
        ctl = retbox[0]
      
      elif ctl == 3105:
        retbox = self.BPXG1_proc3105(objj,trace) # always returns an array with [0]== status
        ctl = retbox[0]
      
      elif ctl == 3100:
        retbox = self.BPXG1_proc3100(objj,trace) # always returns an array with [0]== status
        ctl = retbox[0]
      
      elif ctl == 3101:
        retbox = self.BPXG1_proc3101(objj,trace) # always returns an array with [0]== status
        ctl = retbox[0]
      
      elif ctl == 3102:
        retbox = self.BPXG1_proc3102(objj,trace) # always returns an array with [0]== status
        ctl = retbox[0]
      
      elif ctl == 3103:
        retbox = self.BPXG1_proc3103(objj,trace) # always returns an array with [0]== status
        ctl = retbox[0]
      
      elif ctl == 320:
        retbox = self.BPXG1_proc320(objj,trace) # always returns an array with [0]== status
        ctl = retbox[0]
      
      elif ctl == 5:
        retbox = self.BPXG1_proc5(objj,trace) # always returns an array with [0]== status
        ctl = retbox[0]
      
      elif ctl == 325:
        retbox = self.BPXG1_proc325(objj,trace) # always returns an array with [0]== status
        ctl = retbox[0]
      
      elif ctl == 9:
        retbox = self.BPXG1_proc9(objj,trace) # always returns an array with [0]== status
        ctl = retbox[0]
      
      elif ctl == 200:
        retbox = self.BPXG1_proc200(objj,trace) # always returns an array with [0]== status
        ctl = retbox[0]
      
      elif ctl == 610:
        retbox = self.BPXG1_proc610(objj,trace) # always returns an array with [0]== status
        ctl = retbox[0]
      
      elif ctl == 75:
        retbox = self.BPXG1_proc75(objj,trace) # always returns an array with [0]== status
        ctl = retbox[0]
      
      elif ctl == 74:
        retbox = self.BPXG1_proc74(objj,trace) # always returns an array with [0]== status
        ctl = retbox[0]
      
      elif ctl == 73:
        retbox = self.BPXG1_proc73(objj,trace) # always returns an array with [0]== status
        ctl = retbox[0]
      
      elif ctl == 72:
        retbox = self.BPXG1_proc72(objj,trace) # always returns an array with [0]== status
        ctl = retbox[0]
      
      elif ctl == 71:
        retbox = self.BPXG1_proc71(objj,trace) # always returns an array with [0]== status
        ctl = retbox[0]
      
      elif ctl == 70:
        retbox = self.BPXG1_proc70(objj,trace) # always returns an array with [0]== status
        ctl = retbox[0]
      
      elif ctl == 950:
        retbox = self.BPXG1_proc950(objj,trace) # always returns an array with [0]== status
        ctl = retbox[0]
      
      elif ctl == 800:
        retbox = self.BPXG1_proc800(objj,trace) # always returns an array with [0]== status
        ctl = retbox[0]
      
      elif ctl == -100: #-100 is ok return
        ctl = -100 # nop
      else:
        print 'unknown range for ctl. ctl=',ctl,' ending'
        ctl = -3 # fail on unknown range
    #wend
      if trace == 1:
        xx = raw_input  ( 'loop ending. ctl=' + ctl.__str__() )
    return (retbox,objj)
  # end main

  def BPXG1_init(self,objj,trace):
    retbox = [0,objj,trace]
    if trace == 1:
      xx = raw_input ( 'begin BPXG1_init ')
    # endif
    objj['c'] = {} # class store
    objj['v'] = {} # vector array
    import simpleVectorStk # push pop rtns 
    objj = simpleVectorStk.main(objj) # assume objj={} on entry 
    # add nds 
    import ndsClass 
    objj['nds'] = ndsClass.nds('var') 
    import simpleStk
    objj['es'] = simpleStk.Stk()
    # Imports and Vector setting
    

    import v_DLcn
    objj['v']["$cn"] = v_DLcn.main # objj,trace
    
    import v_SLSL3100SLSL301SLSL
    objj['v']["//3100//301//"] = v_SLSL3100SLSL301SLSL.main # objj,trace
    
    import v_EQEQLTprojectGT
    objj['v']["==<project>"] = v_EQEQLTprojectGT.main # objj,trace
    
    import v_DLproject
    objj['v']["$project"] = v_DLproject.main # objj,trace
    
    import v_EQEQCLNG
    objj['v']["==:-"] = v_EQEQCLNG.main # objj,trace
    
    import v_UBUBwriteProjectRecord
    objj['v']["__writeProjectRecord"] = v_UBUBwriteProjectRecord.main # objj,trace
    
    import v_SLSL3100SLSL315SLSL
    objj['v']["//3100//315//"] = v_SLSL3100SLSL315SLSL.main # objj,trace
    
    import v_DLSPbadSPFormatSPOPSPnoSPOXOXSPSPorSPOPSICPSPCP
    objj['v']["$ bad Format ( no [[  or (;) )"] = v_DLSPbadSPFormatSPOPSPnoSPOXOXSPSPorSPOPSICPSPCP.main # objj,trace
    
    import v_SLSL80SLSL74SLSL
    objj['v']["//80//74//"] = v_SLSL80SLSL74SLSL.main # objj,trace
    
    import v_UBUBdrop
    objj['v']["__drop"] = v_UBUBdrop.main # objj,trace
    
    import v_EQEQOXOX
    objj['v']["==[["] = v_EQEQOXOX.main # objj,trace
    
    import v_DLFilenameHKSP
    objj['v']["$Filename? "] = v_DLFilenameHKSP.main # objj,trace
    
    import v_UBUBAT
    objj['v']["__@"] = v_UBUBAT.main # objj,trace
    
    import v_UBUBinitLib
    objj['v']["__initLib"] = v_UBUBinitLib.main # objj,trace
    
    import v_DLvn
    objj['v']["$vn"] = v_DLvn.main # objj,trace
    
    import v_UBUBBG
    objj['v']["__!"] = v_UBUBBG.main # objj,trace
    
    import v_UBUBpword
    objj['v']["__pword"] = v_UBUBpword.main # objj,trace
    
    import v_SLSL90SLSL87SLSL
    objj['v']["//90//87//"] = v_SLSL90SLSL87SLSL.main # objj,trace
    
    import v_UBUBwriteBPXEolRecord
    objj['v']["__writeBPXEolRecord"] = v_UBUBwriteBPXEolRecord.main # objj,trace
    
    import v_UBUBnop
    objj['v']["__nop"] = v_UBUBnop.main # objj,trace
    
    import v_init
    objj['v']["init"] = v_init.main # objj,trace
    
    import v_cleanup
    objj['v']["cleanup"] = v_cleanup.main # objj,trace
    
    import v_UBUBmsg
    objj['v']["__msg"] = v_UBUBmsg.main # objj,trace
    
    import v_EQEQSLSL
    objj['v']["==//"] = v_EQEQSLSL.main # objj,trace
    
    import v_UBUBcallend
    objj['v']["__callend"] = v_UBUBcallend.main # objj,trace
    
    import v_DLbadSPFormatSPnoSPOPSPCLNGSPCPSP
    objj['v']["$bad Format no ( :- ) "] = v_DLbadSPFormatSPnoSPOPSPCLNGSPCPSP.main # objj,trace
    
    import v_UBUBswap
    objj['v']["__swap"] = v_UBUBswap.main # objj,trace
    
    import v_SLSL500SLSL14SLSL
    objj['v']["//500//14//"] = v_SLSL500SLSL14SLSL.main # objj,trace
    
    import v_EQEQATendend
    objj['v']["==@endend"] = v_EQEQATendend.main # objj,trace
    
    import v_SLSL3100SLSL325SLSL
    objj['v']["//3100//325//"] = v_SLSL3100SLSL325SLSL.main # objj,trace
    
    import v_UBUBdup
    objj['v']["__dup"] = v_UBUBdup.main # objj,trace
    
    import v_DLSPbadSPformatSPOPSPnoSPCXCXSPCP
    objj['v']["$ bad format ( no ]] )"] = v_DLSPbadSPformatSPOPSPnoSPCXCXSPCP.main # objj,trace
    
    import v_UBUBwriteBPXPgfRecord
    objj['v']["__writeBPXPgfRecord"] = v_UBUBwriteBPXPgfRecord.main # objj,trace
    
    import v_EQEQeof
    objj['v']["==eof"] = v_EQEQeof.main # objj,trace
    
    import v_UBUBwriteBPXRecord
    objj['v']["__writeBPXRecord"] = v_UBUBwriteBPXRecord.main # objj,trace
    
    import v_EQEQDT
    objj['v']["==."] = v_EQEQDT.main # objj,trace
    
    import v_DLunexpectedSPeof
    objj['v']["$unexpected eof"] = v_DLunexpectedSPeof.main # objj,trace
    
    import v_DL0
    objj['v']["$0"] = v_DL0.main # objj,trace
    
    import v_DL07NG22NG2013SP0200
    objj['v']["$07-22-2013 0200"] = v_DL07NG22NG2013SP0200.main # objj,trace
    
    import v_EQEQCXCX
    objj['v']["==]]"] = v_EQEQCXCX.main # objj,trace
    
    import v_DLpgfName
    objj['v']["$pgfName"] = v_DLpgfName.main # objj,trace
    
    import v_EQEQSI
    objj['v']["==;"] = v_EQEQSI.main # objj,trace
    
    import v_UBUBwriteBPXEofRecord
    objj['v']["__writeBPXEofRecord"] = v_UBUBwriteBPXEofRecord.main # objj,trace
    
    import v_UBUBPLPL
    objj['v']["__++"] = v_UBUBPLPL.main # objj,trace
    
    import v_DLversion
    objj['v']["$version"] = v_DLversion.main # objj,trace
    
    import v_UBUBinitFioi
    objj['v']["__initFioi"] = v_UBUBinitFioi.main # objj,trace
    
    import v_SLSL3100SLSL227SLSL
    objj['v']["//3100//227//"] = v_SLSL3100SLSL227SLSL.main # objj,trace
    
    import v_DLfn
    objj['v']["$fn"] = v_DLfn.main # objj,trace
    
    import v_SLSL70SLSL63SLSL
    objj['v']["//70//63//"] = v_SLSL70SLSL63SLSL.main # objj,trace
    
    import v_SLSL3100SLSL430SLSL
    objj['v']["//3100//430//"] = v_SLSL3100SLSL430SLSL.main # objj,trace
    
    import v_UBUBask
    objj['v']["__ask"] = v_UBUBask.main # objj,trace
    
    return(retbox)
  # end def init_BPXG1
  
  def testbed(self,objj,trace):
    ans = self.BPXG1_init(objj,trace)
    return(ans)
  # end testbed

  # procedures 
  
  def BPXG1_proc215(self,objj,trace):
    if trace == 1:
      xx = raw_input ( 'begin BPXG1_proc215') 
    retbox = [0,objj,trace] # initilize by type
    # {'cell': '215', 'yesCell': '220', 'noCell': '-99', 'op': '__pword'}
    # assume all verbs are tests
    ans = objj['v']["__pword"](objj,trace)
    ret = ans[0]
    objj = ans[1]
    trace = ans[2]
    if (ret == 0):
        NextPoint = 220
    elif (ret == -1):
        NextPoint = -99
    else:
        NextPoint = ret
    #endif
    retbox[0]= NextPoint
    return(retbox)
  # end def BPXG1_proc215 
  
  def BPXG1_proc9200(self,objj,trace):
    if trace == 1:
      xx = raw_input ( 'begin BPXG1_proc9200') 
    retbox = [0,objj,trace] # initilize by type
    # {'cell': '9200', 'yesCell': '301', 'noCell': '-99', 'op': '//3100//301//'}
    # assume all verbs are tests
    ans = objj['v']["//3100//301//"](objj,trace)
    ret = ans[0]
    objj = ans[1]
    trace = ans[2]
    if (ret == 0):
        NextPoint = 301
    elif (ret == -1):
        NextPoint = -99
    else:
        NextPoint = ret
    #endif
    retbox[0]= NextPoint
    return(retbox)
  # end def BPXG1_proc9200 
  
  def BPXG1_proc210(self,objj,trace):
    if trace == 1:
      xx = raw_input ( 'begin BPXG1_proc210') 
    retbox = [0,objj,trace] # initilize by type
    # {'cell': '210', 'yesCell': '2100', 'noCell': '-99', 'op': '$cn'}
    # assume all verbs are tests
    ans = objj['v']["$cn"](objj,trace)
    ret = ans[0]
    objj = ans[1]
    trace = ans[2]
    if (ret == 0):
        NextPoint = 2100
    elif (ret == -1):
        NextPoint = -99
    else:
        NextPoint = ret
    #endif
    retbox[0]= NextPoint
    return(retbox)
  # end def BPXG1_proc210 
  
  def BPXG1_proc227(self,objj,trace):
    if trace == 1:
      xx = raw_input ( 'begin BPXG1_proc227') 
    retbox = [0,objj,trace] # initilize by type
    # {'cell': '227', 'yesCell': '90', 'noCell': '-99', 'op': '__writeBPXRecord'}
    # assume all verbs are tests
    ans = objj['v']["__writeBPXRecord"](objj,trace)
    ret = ans[0]
    objj = ans[1]
    trace = ans[2]
    if (ret == 0):
        NextPoint = 90
    elif (ret == -1):
        NextPoint = -99
    else:
        NextPoint = ret
    #endif
    retbox[0]= NextPoint
    return(retbox)
  # end def BPXG1_proc227 
  
  def BPXG1_proc130(self,objj,trace):
    if trace == 1:
      xx = raw_input ( 'begin BPXG1_proc130') 
    retbox = [0,objj,trace] # initilize by type
    # {'cell': '130', 'yesCell': '14', 'noCell': '-99', 'op': '//500//14//'}
    # assume all verbs are tests
    ans = objj['v']["//500//14//"](objj,trace)
    ret = ans[0]
    objj = ans[1]
    trace = ans[2]
    if (ret == 0):
        NextPoint = 14
    elif (ret == -1):
        NextPoint = -99
    else:
        NextPoint = ret
    #endif
    retbox[0]= NextPoint
    return(retbox)
  # end def BPXG1_proc130 
  
  def BPXG1_proc225(self,objj,trace):
    if trace == 1:
      xx = raw_input ( 'begin BPXG1_proc225') 
    retbox = [0,objj,trace] # initilize by type
    # {'cell': '225', 'yesCell': '2250', 'noCell': '-99', 'op': '$0'}
    # assume all verbs are tests
    ans = objj['v']["$0"](objj,trace)
    ret = ans[0]
    objj = ans[1]
    trace = ans[2]
    if (ret == 0):
        NextPoint = 2250
    elif (ret == -1):
        NextPoint = -99
    else:
        NextPoint = ret
    #endif
    retbox[0]= NextPoint
    return(retbox)
  # end def BPXG1_proc225 
  
  def BPXG1_proc4(self,objj,trace):
    if trace == 1:
      xx = raw_input ( 'begin BPXG1_proc4') 
    retbox = [0,objj,trace] # initilize by type
    # {'cell': '4', 'yesCell': '5', 'noCell': '-99', 'op': '$Filename? '}
    # assume all verbs are tests
    ans = objj['v']["$Filename? "](objj,trace)
    ret = ans[0]
    objj = ans[1]
    trace = ans[2]
    if (ret == 0):
        NextPoint = 5
    elif (ret == -1):
        NextPoint = -99
    else:
        NextPoint = ret
    #endif
    retbox[0]= NextPoint
    return(retbox)
  # end def BPXG1_proc4 
  
  def BPXG1_proc400(self,objj,trace):
    if trace == 1:
      xx = raw_input ( 'begin BPXG1_proc400') 
    retbox = [0,objj,trace] # initilize by type
    # {'cell': '400', 'yesCell': '410', 'noCell': '95', 'op': '==//'}
    # assume all verbs are tests
    ans = objj['v']["==//"](objj,trace)
    ret = ans[0]
    objj = ans[1]
    trace = ans[2]
    if (ret == 0):
        NextPoint = 410
    elif (ret == -1):
        NextPoint = 95
    else:
        NextPoint = ret
    #endif
    retbox[0]= NextPoint
    return(retbox)
  # end def BPXG1_proc400 
  
  def BPXG1_proc8(self,objj,trace):
    if trace == 1:
      xx = raw_input ( 'begin BPXG1_proc8') 
    retbox = [0,objj,trace] # initilize by type
    # {'cell': '8', 'yesCell': '800', 'noCell': '-99', 'op': '__!'}
    # assume all verbs are tests
    ans = objj['v']["__!"](objj,trace)
    ret = ans[0]
    objj = ans[1]
    trace = ans[2]
    if (ret == 0):
        NextPoint = 800
    elif (ret == -1):
        NextPoint = -99
    else:
        NextPoint = ret
    #endif
    retbox[0]= NextPoint
    return(retbox)
  # end def BPXG1_proc8 
  
  def BPXG1_proc285(self,objj,trace):
    if trace == 1:
      xx = raw_input ( 'begin BPXG1_proc285') 
    retbox = [0,objj,trace] # initilize by type
    # {'cell': '285', 'yesCell': '286', 'noCell': '-99', 'op': '$ bad Format ( no [[  or (;) )'}
    # assume all verbs are tests
    ans = objj['v']["$ bad Format ( no [[  or (;) )"](objj,trace)
    ret = ans[0]
    objj = ans[1]
    trace = ans[2]
    if (ret == 0):
        NextPoint = 286
    elif (ret == -1):
        NextPoint = -99
    else:
        NextPoint = ret
    #endif
    retbox[0]= NextPoint
    return(retbox)
  # end def BPXG1_proc285 
  
  def BPXG1_proc286(self,objj,trace):
    if trace == 1:
      xx = raw_input ( 'begin BPXG1_proc286') 
    retbox = [0,objj,trace] # initilize by type
    # {'cell': '286', 'yesCell': '-9285', 'noCell': '-99', 'op': '__msg'}
    # assume all verbs are tests
    ans = objj['v']["__msg"](objj,trace)
    ret = ans[0]
    objj = ans[1]
    trace = ans[2]
    if (ret == 0):
        NextPoint = -9285
    elif (ret == -1):
        NextPoint = -99
    else:
        NextPoint = ret
    #endif
    retbox[0]= NextPoint
    return(retbox)
  # end def BPXG1_proc286 
  
  def BPXG1_proc120(self,objj,trace):
    if trace == 1:
      xx = raw_input ( 'begin BPXG1_proc120') 
    retbox = [0,objj,trace] # initilize by type
    # {'cell': '120', 'yesCell': '13', 'noCell': '-99', 'op': '$project'}
    # assume all verbs are tests
    ans = objj['v']["$project"](objj,trace)
    ret = ans[0]
    objj = ans[1]
    trace = ans[2]
    if (ret == 0):
        NextPoint = 13
    elif (ret == -1):
        NextPoint = -99
    else:
        NextPoint = ret
    #endif
    retbox[0]= NextPoint
    return(retbox)
  # end def BPXG1_proc120 
  
  def BPXG1_proc3131(self,objj,trace):
    if trace == 1:
      xx = raw_input ( 'begin BPXG1_proc3131') 
    retbox = [0,objj,trace] # initilize by type
    # {'cell': '3131', 'yesCell': '315', 'noCell': '-99', 'op': '//3100//315//'}
    # assume all verbs are tests
    ans = objj['v']["//3100//315//"](objj,trace)
    ret = ans[0]
    objj = ans[1]
    trace = ans[2]
    if (ret == 0):
        NextPoint = 315
    elif (ret == -1):
        NextPoint = -99
    else:
        NextPoint = ret
    #endif
    retbox[0]= NextPoint
    return(retbox)
  # end def BPXG1_proc3131 
  
  def BPXG1_proc3200(self,objj,trace):
    if trace == 1:
      xx = raw_input ( 'begin BPXG1_proc3200') 
    retbox = [0,objj,trace] # initilize by type
    # {'cell': '3200', 'yesCell': '325', 'noCell': '-99', 'op': '//3100//325//'}
    # assume all verbs are tests
    ans = objj['v']["//3100//325//"](objj,trace)
    ret = ans[0]
    objj = ans[1]
    trace = ans[2]
    if (ret == 0):
        NextPoint = 325
    elif (ret == -1):
        NextPoint = -99
    else:
        NextPoint = ret
    #endif
    retbox[0]= NextPoint
    return(retbox)
  # end def BPXG1_proc3200 
  
  def BPXG1_proc51(self,objj,trace):
    if trace == 1:
      xx = raw_input ( 'begin BPXG1_proc51') 
    retbox = [0,objj,trace] # initilize by type
    # {'cell': '51', 'yesCell': '52', 'noCell': '61', 'op': '==@endend'}
    # assume all verbs are tests
    ans = objj['v']["==@endend"](objj,trace)
    ret = ans[0]
    objj = ans[1]
    trace = ans[2]
    if (ret == 0):
        NextPoint = 52
    elif (ret == -1):
        NextPoint = 61
    else:
        NextPoint = ret
    #endif
    retbox[0]= NextPoint
    return(retbox)
  # end def BPXG1_proc51 
  
  def BPXG1_proc50(self,objj,trace):
    if trace == 1:
      xx = raw_input ( 'begin BPXG1_proc50') 
    retbox = [0,objj,trace] # initilize by type
    # {'cell': '50', 'yesCell': '51', 'noCell': '-99', 'op': '__pword'}
    # assume all verbs are tests
    ans = objj['v']["__pword"](objj,trace)
    ret = ans[0]
    objj = ans[1]
    trace = ans[2]
    if (ret == 0):
        NextPoint = 51
    elif (ret == -1):
        NextPoint = -99
    else:
        NextPoint = ret
    #endif
    retbox[0]= NextPoint
    return(retbox)
  # end def BPXG1_proc50 
  
  def BPXG1_proc52(self,objj,trace):
    if trace == 1:
      xx = raw_input ( 'begin BPXG1_proc52') 
    retbox = [0,objj,trace] # initilize by type
    # {'cell': '52', 'yesCell': '-100', 'noCell': '-99', 'op': 'cleanup'}
    # assume all verbs are tests
    ans = objj['v']["cleanup"](objj,trace)
    ret = ans[0]
    objj = ans[1]
    trace = ans[2]
    if (ret == 0):
        NextPoint = -100
    elif (ret == -1):
        NextPoint = -99
    else:
        NextPoint = ret
    #endif
    retbox[0]= NextPoint
    return(retbox)
  # end def BPXG1_proc52 
  
  def BPXG1_proc410(self,objj,trace):
    if trace == 1:
      xx = raw_input ( 'begin BPXG1_proc410') 
    retbox = [0,objj,trace] # initilize by type
    # {'cell': '410', 'yesCell': '420', 'noCell': '-99', 'op': '__pword'}
    # assume all verbs are tests
    ans = objj['v']["__pword"](objj,trace)
    ret = ans[0]
    objj = ans[1]
    trace = ans[2]
    if (ret == 0):
        NextPoint = 420
    elif (ret == -1):
        NextPoint = -99
    else:
        NextPoint = ret
    #endif
    retbox[0]= NextPoint
    return(retbox)
  # end def BPXG1_proc410 
  
  def BPXG1_proc2251(self,objj,trace):
    if trace == 1:
      xx = raw_input ( 'begin BPXG1_proc2251') 
    retbox = [0,objj,trace] # initilize by type
    # {'cell': '2251', 'yesCell': '86', 'noCell': '-99', 'op': '__!'}
    # assume all verbs are tests
    ans = objj['v']["__!"](objj,trace)
    ret = ans[0]
    objj = ans[1]
    trace = ans[2]
    if (ret == 0):
        NextPoint = 86
    elif (ret == -1):
        NextPoint = -99
    else:
        NextPoint = ret
    #endif
    retbox[0]= NextPoint
    return(retbox)
  # end def BPXG1_proc2251 
  
  def BPXG1_proc2250(self,objj,trace):
    if trace == 1:
      xx = raw_input ( 'begin BPXG1_proc2250') 
    retbox = [0,objj,trace] # initilize by type
    # {'cell': '2250', 'yesCell': '2251', 'noCell': '-99', 'op': '$vn'}
    # assume all verbs are tests
    ans = objj['v']["$vn"](objj,trace)
    ret = ans[0]
    objj = ans[1]
    trace = ans[2]
    if (ret == 0):
        NextPoint = 2251
    elif (ret == -1):
        NextPoint = -99
    else:
        NextPoint = ret
    #endif
    retbox[0]= NextPoint
    return(retbox)
  # end def BPXG1_proc2250 
  
  def BPXG1_proc310(self,objj,trace):
    if trace == 1:
      xx = raw_input ( 'begin BPXG1_proc310') 
    retbox = [0,objj,trace] # initilize by type
    # {'cell': '310', 'yesCell': '3131', 'noCell': '-99', 'op': '$cn'}
    # assume all verbs are tests
    ans = objj['v']["$cn"](objj,trace)
    ret = ans[0]
    objj = ans[1]
    trace = ans[2]
    if (ret == 0):
        NextPoint = 3131
    elif (ret == -1):
        NextPoint = -99
    else:
        NextPoint = ret
    #endif
    retbox[0]= NextPoint
    return(retbox)
  # end def BPXG1_proc310 
  
  def BPXG1_proc315(self,objj,trace):
    if trace == 1:
      xx = raw_input ( 'begin BPXG1_proc315') 
    retbox = [0,objj,trace] # initilize by type
    # {'cell': '315', 'yesCell': '3150', 'noCell': '-99', 'op': '$0'}
    # assume all verbs are tests
    ans = objj['v']["$0"](objj,trace)
    ret = ans[0]
    objj = ans[1]
    trace = ans[2]
    if (ret == 0):
        NextPoint = 3150
    elif (ret == -1):
        NextPoint = -99
    else:
        NextPoint = ret
    #endif
    retbox[0]= NextPoint
    return(retbox)
  # end def BPXG1_proc315 
  
  def BPXG1_proc82(self,objj,trace):
    if trace == 1:
      xx = raw_input ( 'begin BPXG1_proc82') 
    retbox = [0,objj,trace] # initilize by type
    # {'cell': '82', 'yesCell': '-1', 'noCell': '-99', 'op': '__callend'}
    # assume all verbs are tests
    ans = objj['v']["__callend"](objj,trace)
    ret = ans[0]
    objj = ans[1]
    trace = ans[2]
    if (ret == 0):
        NextPoint = -1
    elif (ret == -1):
        NextPoint = -99
    else:
        NextPoint = ret
    #endif
    retbox[0]= NextPoint
    return(retbox)
  # end def BPXG1_proc82 
  
  def BPXG1_proc80(self,objj,trace):
    if trace == 1:
      xx = raw_input ( 'begin BPXG1_proc80') 
    retbox = [0,objj,trace] # initilize by type
    # {'cell': '80', 'yesCell': '81', 'noCell': '-99', 'op': '__pword'}
    # assume all verbs are tests
    ans = objj['v']["__pword"](objj,trace)
    ret = ans[0]
    objj = ans[1]
    trace = ans[2]
    if (ret == 0):
        NextPoint = 81
    elif (ret == -1):
        NextPoint = -99
    else:
        NextPoint = ret
    #endif
    retbox[0]= NextPoint
    return(retbox)
  # end def BPXG1_proc80 
  
  def BPXG1_proc81(self,objj,trace):
    if trace == 1:
      xx = raw_input ( 'begin BPXG1_proc81') 
    retbox = [0,objj,trace] # initilize by type
    # {'cell': '81', 'yesCell': '310', 'noCell': '85', 'op': '==;'}
    # assume all verbs are tests
    ans = objj['v']["==;"](objj,trace)
    ret = ans[0]
    objj = ans[1]
    trace = ans[2]
    if (ret == 0):
        NextPoint = 310
    elif (ret == -1):
        NextPoint = 85
    else:
        NextPoint = ret
    #endif
    retbox[0]= NextPoint
    return(retbox)
  # end def BPXG1_proc81 
  
  def BPXG1_proc86(self,objj,trace):
    if trace == 1:
      xx = raw_input ( 'begin BPXG1_proc86') 
    retbox = [0,objj,trace] # initilize by type
    # {'cell': '86', 'yesCell': '87', 'noCell': '-99', 'op': '//90//87//'}
    # assume all verbs are tests
    ans = objj['v']["//90//87//"](objj,trace)
    ret = ans[0]
    objj = ans[1]
    trace = ans[2]
    if (ret == 0):
        NextPoint = 87
    elif (ret == -1):
        NextPoint = -99
    else:
        NextPoint = ret
    #endif
    retbox[0]= NextPoint
    return(retbox)
  # end def BPXG1_proc86 
  
  def BPXG1_proc87(self,objj,trace):
    if trace == 1:
      xx = raw_input ( 'begin BPXG1_proc87') 
    retbox = [0,objj,trace] # initilize by type
    # {'cell': '87', 'yesCell': '80', 'noCell': '-99', 'op': '__nop'}
    # assume all verbs are tests
    ans = objj['v']["__nop"](objj,trace)
    ret = ans[0]
    objj = ans[1]
    trace = ans[2]
    if (ret == 0):
        NextPoint = 80
    elif (ret == -1):
        NextPoint = -99
    else:
        NextPoint = ret
    #endif
    retbox[0]= NextPoint
    return(retbox)
  # end def BPXG1_proc87 
  
  def BPXG1_proc85(self,objj,trace):
    if trace == 1:
      xx = raw_input ( 'begin BPXG1_proc85') 
    retbox = [0,objj,trace] # initilize by type
    # {'cell': '85', 'yesCell': '200', 'noCell': '285', 'op': '==[['}
    # assume all verbs are tests
    ans = objj['v']["==[["](objj,trace)
    ret = ans[0]
    objj = ans[1]
    trace = ans[2]
    if (ret == 0):
        NextPoint = 200
    elif (ret == -1):
        NextPoint = 285
    else:
        NextPoint = ret
    #endif
    retbox[0]= NextPoint
    return(retbox)
  # end def BPXG1_proc85 
  
  def BPXG1_proc3(self,objj,trace):
    if trace == 1:
      xx = raw_input ( 'begin BPXG1_proc3') 
    retbox = [0,objj,trace] # initilize by type
    # {'cell': '3', 'yesCell': '300', 'noCell': '-99', 'op': '$07-22-2013 0200'}
    # assume all verbs are tests
    ans = objj['v']["$07-22-2013 0200"](objj,trace)
    ret = ans[0]
    objj = ans[1]
    trace = ans[2]
    if (ret == 0):
        NextPoint = 300
    elif (ret == -1):
        NextPoint = -99
    else:
        NextPoint = ret
    #endif
    retbox[0]= NextPoint
    return(retbox)
  # end def BPXG1_proc3 
  
  def BPXG1_proc7(self,objj,trace):
    if trace == 1:
      xx = raw_input ( 'begin BPXG1_proc7') 
    retbox = [0,objj,trace] # initilize by type
    # {'cell': '7', 'yesCell': '8', 'noCell': '-99', 'op': '$fn'}
    # assume all verbs are tests
    ans = objj['v']["$fn"](objj,trace)
    ret = ans[0]
    objj = ans[1]
    trace = ans[2]
    if (ret == 0):
        NextPoint = 8
    elif (ret == -1):
        NextPoint = -99
    else:
        NextPoint = ret
    #endif
    retbox[0]= NextPoint
    return(retbox)
  # end def BPXG1_proc7 
  
  def BPXG1_proc301(self,objj,trace):
    if trace == 1:
      xx = raw_input ( 'begin BPXG1_proc301') 
    retbox = [0,objj,trace] # initilize by type
    # {'cell': '301', 'yesCell': '93', 'noCell': '-99', 'op': '__writeBPXEolRecord'}
    # assume all verbs are tests
    ans = objj['v']["__writeBPXEolRecord"](objj,trace)
    ret = ans[0]
    objj = ans[1]
    trace = ans[2]
    if (ret == 0):
        NextPoint = 93
    elif (ret == -1):
        NextPoint = -99
    else:
        NextPoint = ret
    #endif
    retbox[0]= NextPoint
    return(retbox)
  # end def BPXG1_proc301 
  
  def BPXG1_proc420(self,objj,trace):
    if trace == 1:
      xx = raw_input ( 'begin BPXG1_proc420') 
    retbox = [0,objj,trace] # initilize by type
    # {'cell': '420', 'yesCell': '4200', 'noCell': '-99', 'op': '$vn'}
    # assume all verbs are tests
    ans = objj['v']["$vn"](objj,trace)
    ret = ans[0]
    objj = ans[1]
    trace = ans[2]
    if (ret == 0):
        NextPoint = 4200
    elif (ret == -1):
        NextPoint = -99
    else:
        NextPoint = ret
    #endif
    retbox[0]= NextPoint
    return(retbox)
  # end def BPXG1_proc420 
  
  def BPXG1_proc300(self,objj,trace):
    if trace == 1:
      xx = raw_input ( 'begin BPXG1_proc300') 
    retbox = [0,objj,trace] # initilize by type
    # {'cell': '300', 'yesCell': '302', 'noCell': '-99', 'op': '$version'}
    # assume all verbs are tests
    ans = objj['v']["$version"](objj,trace)
    ret = ans[0]
    objj = ans[1]
    trace = ans[2]
    if (ret == 0):
        NextPoint = 302
    elif (ret == -1):
        NextPoint = -99
    else:
        NextPoint = ret
    #endif
    retbox[0]= NextPoint
    return(retbox)
  # end def BPXG1_proc300 
  
  def BPXG1_proc302(self,objj,trace):
    if trace == 1:
      xx = raw_input ( 'begin BPXG1_proc302') 
    retbox = [0,objj,trace] # initilize by type
    # {'cell': '302', 'yesCell': '4', 'noCell': '-99', 'op': '__!'}
    # assume all verbs are tests
    ans = objj['v']["__!"](objj,trace)
    ret = ans[0]
    objj = ans[1]
    trace = ans[2]
    if (ret == 0):
        NextPoint = 4
    elif (ret == -1):
        NextPoint = -99
    else:
        NextPoint = ret
    #endif
    retbox[0]= NextPoint
    return(retbox)
  # end def BPXG1_proc302 
  
  def BPXG1_proc3151(self,objj,trace):
    if trace == 1:
      xx = raw_input ( 'begin BPXG1_proc3151') 
    retbox = [0,objj,trace] # initilize by type
    # {'cell': '3151', 'yesCell': '320', 'noCell': '-99', 'op': '__!'}
    # assume all verbs are tests
    ans = objj['v']["__!"](objj,trace)
    ret = ans[0]
    objj = ans[1]
    trace = ans[2]
    if (ret == 0):
        NextPoint = 320
    elif (ret == -1):
        NextPoint = -99
    else:
        NextPoint = ret
    #endif
    retbox[0]= NextPoint
    return(retbox)
  # end def BPXG1_proc3151 
  
  def BPXG1_proc3150(self,objj,trace):
    if trace == 1:
      xx = raw_input ( 'begin BPXG1_proc3150') 
    retbox = [0,objj,trace] # initilize by type
    # {'cell': '3150', 'yesCell': '3151', 'noCell': '-99', 'op': '$vn'}
    # assume all verbs are tests
    ans = objj['v']["$vn"](objj,trace)
    ret = ans[0]
    objj = ans[1]
    trace = ans[2]
    if (ret == 0):
        NextPoint = 3151
    elif (ret == -1):
        NextPoint = -99
    else:
        NextPoint = ret
    #endif
    retbox[0]= NextPoint
    return(retbox)
  # end def BPXG1_proc3150 
  
  def BPXG1_proc511(self,objj,trace):
    if trace == 1:
      xx = raw_input ( 'begin BPXG1_proc511') 
    retbox = [0,objj,trace] # initilize by type
    # {'cell': '511', 'yesCell': '-1', 'noCell': '-99', 'op': '__callend'}
    # assume all verbs are tests
    ans = objj['v']["__callend"](objj,trace)
    ret = ans[0]
    objj = ans[1]
    trace = ans[2]
    if (ret == 0):
        NextPoint = -1
    elif (ret == -1):
        NextPoint = -99
    else:
        NextPoint = ret
    #endif
    retbox[0]= NextPoint
    return(retbox)
  # end def BPXG1_proc511 
  
  def BPXG1_proc510(self,objj,trace):
    if trace == 1:
      xx = raw_input ( 'begin BPXG1_proc510') 
    retbox = [0,objj,trace] # initilize by type
    # {'cell': '510', 'yesCell': '511', 'noCell': '-99', 'op': '__writeProjectRecord'}
    # assume all verbs are tests
    ans = objj['v']["__writeProjectRecord"](objj,trace)
    ret = ans[0]
    objj = ans[1]
    trace = ans[2]
    if (ret == 0):
        NextPoint = 511
    elif (ret == -1):
        NextPoint = -99
    else:
        NextPoint = ret
    #endif
    retbox[0]= NextPoint
    return(retbox)
  # end def BPXG1_proc510 
  
  def BPXG1_proc430(self,objj,trace):
    if trace == 1:
      xx = raw_input ( 'begin BPXG1_proc430') 
    retbox = [0,objj,trace] # initilize by type
    # {'cell': '430', 'yesCell': '90', 'noCell': '-99', 'op': '__writeBPXPgfRecord'}
    # assume all verbs are tests
    ans = objj['v']["__writeBPXPgfRecord"](objj,trace)
    ret = ans[0]
    objj = ans[1]
    trace = ans[2]
    if (ret == 0):
        NextPoint = 90
    elif (ret == -1):
        NextPoint = -99
    else:
        NextPoint = ret
    #endif
    retbox[0]= NextPoint
    return(retbox)
  # end def BPXG1_proc430 
  
  def BPXG1_proc61(self,objj,trace):
    if trace == 1:
      xx = raw_input ( 'begin BPXG1_proc61') 
    retbox = [0,objj,trace] # initilize by type
    # {'cell': '61', 'yesCell': '610', 'noCell': '-99', 'op': '$pgfName'}
    # assume all verbs are tests
    ans = objj['v']["$pgfName"](objj,trace)
    ret = ans[0]
    objj = ans[1]
    trace = ans[2]
    if (ret == 0):
        NextPoint = 610
    elif (ret == -1):
        NextPoint = -99
    else:
        NextPoint = ret
    #endif
    retbox[0]= NextPoint
    return(retbox)
  # end def BPXG1_proc61 
  
  def BPXG1_proc62(self,objj,trace):
    if trace == 1:
      xx = raw_input ( 'begin BPXG1_proc62') 
    retbox = [0,objj,trace] # initilize by type
    # {'cell': '62', 'yesCell': '63', 'noCell': '-99', 'op': '//70//63//'}
    # assume all verbs are tests
    ans = objj['v']["//70//63//"](objj,trace)
    ret = ans[0]
    objj = ans[1]
    trace = ans[2]
    if (ret == 0):
        NextPoint = 63
    elif (ret == -1):
        NextPoint = -99
    else:
        NextPoint = ret
    #endif
    retbox[0]= NextPoint
    return(retbox)
  # end def BPXG1_proc62 
  
  def BPXG1_proc63(self,objj,trace):
    if trace == 1:
      xx = raw_input ( 'begin BPXG1_proc63') 
    retbox = [0,objj,trace] # initilize by type
    # {'cell': '63', 'yesCell': '50', 'noCell': '-99', 'op': '__nop'}
    # assume all verbs are tests
    ans = objj['v']["__nop"](objj,trace)
    ret = ans[0]
    objj = ans[1]
    trace = ans[2]
    if (ret == 0):
        NextPoint = 50
    elif (ret == -1):
        NextPoint = -99
    else:
        NextPoint = ret
    #endif
    retbox[0]= NextPoint
    return(retbox)
  # end def BPXG1_proc63 
  
  def BPXG1_proc250(self,objj,trace):
    if trace == 1:
      xx = raw_input ( 'begin BPXG1_proc250') 
    retbox = [0,objj,trace] # initilize by type
    # {'cell': '250', 'yesCell': '286', 'noCell': '-99', 'op': '$ bad format ( no ]] )'}
    # assume all verbs are tests
    ans = objj['v']["$ bad format ( no ]] )"](objj,trace)
    ret = ans[0]
    objj = ans[1]
    trace = ans[2]
    if (ret == 0):
        NextPoint = 286
    elif (ret == -1):
        NextPoint = -99
    else:
        NextPoint = ret
    #endif
    retbox[0]= NextPoint
    return(retbox)
  # end def BPXG1_proc250 
  
  def BPXG1_proc2(self,objj,trace):
    if trace == 1:
      xx = raw_input ( 'begin BPXG1_proc2') 
    retbox = [0,objj,trace] # initilize by type
    # {'cell': '2', 'yesCell': '3', 'noCell': '-99', 'op': 'init'}
    # assume all verbs are tests
    ans = objj['v']["init"](objj,trace)
    ret = ans[0]
    objj = ans[1]
    trace = ans[2]
    if (ret == 0):
        NextPoint = 3
    elif (ret == -1):
        NextPoint = -99
    else:
        NextPoint = ret
    #endif
    retbox[0]= NextPoint
    return(retbox)
  # end def BPXG1_proc2 
  
  def BPXG1_proc6(self,objj,trace):
    if trace == 1:
      xx = raw_input ( 'begin BPXG1_proc6') 
    retbox = [0,objj,trace] # initilize by type
    # {'cell': '6', 'yesCell': '7', 'noCell': '-99', 'op': '__dup'}
    # assume all verbs are tests
    ans = objj['v']["__dup"](objj,trace)
    ret = ans[0]
    objj = ans[1]
    trace = ans[2]
    if (ret == 0):
        NextPoint = 7
    elif (ret == -1):
        NextPoint = -99
    else:
        NextPoint = ret
    #endif
    retbox[0]= NextPoint
    return(retbox)
  # end def BPXG1_proc6 
  
  def BPXG1_proc500(self,objj,trace):
    if trace == 1:
      xx = raw_input ( 'begin BPXG1_proc500') 
    retbox = [0,objj,trace] # initilize by type
    # {'cell': '500', 'yesCell': '510', 'noCell': '-99', 'op': '__initLib'}
    # assume all verbs are tests
    ans = objj['v']["__initLib"](objj,trace)
    ret = ans[0]
    objj = ans[1]
    trace = ans[2]
    if (ret == 0):
        NextPoint = 510
    elif (ret == -1):
        NextPoint = -99
    else:
        NextPoint = ret
    #endif
    retbox[0]= NextPoint
    return(retbox)
  # end def BPXG1_proc500 
  
  def BPXG1_proc750(self,objj,trace):
    if trace == 1:
      xx = raw_input ( 'begin BPXG1_proc750') 
    retbox = [0,objj,trace] # initilize by type
    # {'cell': '750', 'yesCell': '-90', 'noCell': '-99', 'op': '__msg'}
    # assume all verbs are tests
    ans = objj['v']["__msg"](objj,trace)
    ret = ans[0]
    objj = ans[1]
    trace = ans[2]
    if (ret == 0):
        NextPoint = -90
    elif (ret == -1):
        NextPoint = -99
    else:
        NextPoint = ret
    #endif
    retbox[0]= NextPoint
    return(retbox)
  # end def BPXG1_proc750 
  
  def BPXG1_proc91(self,objj,trace):
    if trace == 1:
      xx = raw_input ( 'begin BPXG1_proc91') 
    retbox = [0,objj,trace] # initilize by type
    # {'cell': '91', 'yesCell': '92', 'noCell': '400', 'op': '==.'}
    # assume all verbs are tests
    ans = objj['v']["==."](objj,trace)
    ret = ans[0]
    objj = ans[1]
    trace = ans[2]
    if (ret == 0):
        NextPoint = 92
    elif (ret == -1):
        NextPoint = 400
    else:
        NextPoint = ret
    #endif
    retbox[0]= NextPoint
    return(retbox)
  # end def BPXG1_proc91 
  
  def BPXG1_proc90(self,objj,trace):
    if trace == 1:
      xx = raw_input ( 'begin BPXG1_proc90') 
    retbox = [0,objj,trace] # initilize by type
    # {'cell': '90', 'yesCell': '91', 'noCell': '-99', 'op': '__pword'}
    # assume all verbs are tests
    ans = objj['v']["__pword"](objj,trace)
    ret = ans[0]
    objj = ans[1]
    trace = ans[2]
    if (ret == 0):
        NextPoint = 91
    elif (ret == -1):
        NextPoint = -99
    else:
        NextPoint = ret
    #endif
    retbox[0]= NextPoint
    return(retbox)
  # end def BPXG1_proc90 
  
  def BPXG1_proc93(self,objj,trace):
    if trace == 1:
      xx = raw_input ( 'begin BPXG1_proc93') 
    retbox = [0,objj,trace] # initilize by type
    # {'cell': '93', 'yesCell': '-1', 'noCell': '-99', 'op': '__callend'}
    # assume all verbs are tests
    ans = objj['v']["__callend"](objj,trace)
    ret = ans[0]
    objj = ans[1]
    trace = ans[2]
    if (ret == 0):
        NextPoint = -1
    elif (ret == -1):
        NextPoint = -99
    else:
        NextPoint = ret
    #endif
    retbox[0]= NextPoint
    return(retbox)
  # end def BPXG1_proc93 
  
  def BPXG1_proc92(self,objj,trace):
    if trace == 1:
      xx = raw_input ( 'begin BPXG1_proc92') 
    retbox = [0,objj,trace] # initilize by type
    # {'cell': '92', 'yesCell': '9200', 'noCell': '-99', 'op': '$vn'}
    # assume all verbs are tests
    ans = objj['v']["$vn"](objj,trace)
    ret = ans[0]
    objj = ans[1]
    trace = ans[2]
    if (ret == 0):
        NextPoint = 9200
    elif (ret == -1):
        NextPoint = -99
    else:
        NextPoint = ret
    #endif
    retbox[0]= NextPoint
    return(retbox)
  # end def BPXG1_proc92 
  
  def BPXG1_proc95(self,objj,trace):
    if trace == 1:
      xx = raw_input ( 'begin BPXG1_proc95') 
    retbox = [0,objj,trace] # initilize by type
    # {'cell': '95', 'yesCell': '950', 'noCell': '-99', 'op': '$vn'}
    # assume all verbs are tests
    ans = objj['v']["$vn"](objj,trace)
    ret = ans[0]
    objj = ans[1]
    trace = ans[2]
    if (ret == 0):
        NextPoint = 950
    elif (ret == -1):
        NextPoint = -99
    else:
        NextPoint = ret
    #endif
    retbox[0]= NextPoint
    return(retbox)
  # end def BPXG1_proc95 
  
  def BPXG1_proc220(self,objj,trace):
    if trace == 1:
      xx = raw_input ( 'begin BPXG1_proc220') 
    retbox = [0,objj,trace] # initilize by type
    # {'cell': '220', 'yesCell': '225', 'noCell': '250', 'op': '==]]'}
    # assume all verbs are tests
    ans = objj['v']["==]]"](objj,trace)
    ret = ans[0]
    objj = ans[1]
    trace = ans[2]
    if (ret == 0):
        NextPoint = 225
    elif (ret == -1):
        NextPoint = 250
    else:
        NextPoint = ret
    #endif
    retbox[0]= NextPoint
    return(retbox)
  # end def BPXG1_proc220 
  
  def BPXG1_proc11(self,objj,trace):
    if trace == 1:
      xx = raw_input ( 'begin BPXG1_proc11') 
    retbox = [0,objj,trace] # initilize by type
    # {'cell': '11', 'yesCell': '12', 'noCell': '-99', 'op': '__pword'}
    # assume all verbs are tests
    ans = objj['v']["__pword"](objj,trace)
    ret = ans[0]
    objj = ans[1]
    trace = ans[2]
    if (ret == 0):
        NextPoint = 12
    elif (ret == -1):
        NextPoint = -99
    else:
        NextPoint = ret
    #endif
    retbox[0]= NextPoint
    return(retbox)
  # end def BPXG1_proc11 
  
  def BPXG1_proc10(self,objj,trace):
    if trace == 1:
      xx = raw_input ( 'begin BPXG1_proc10') 
    retbox = [0,objj,trace] # initilize by type
    # {'cell': '10', 'yesCell': '11', 'noCell': '16', 'op': '==<project>'}
    # assume all verbs are tests
    ans = objj['v']["==<project>"](objj,trace)
    ret = ans[0]
    objj = ans[1]
    trace = ans[2]
    if (ret == 0):
        NextPoint = 11
    elif (ret == -1):
        NextPoint = 16
    else:
        NextPoint = ret
    #endif
    retbox[0]= NextPoint
    return(retbox)
  # end def BPXG1_proc10 
  
  def BPXG1_proc13(self,objj,trace):
    if trace == 1:
      xx = raw_input ( 'begin BPXG1_proc13') 
    retbox = [0,objj,trace] # initilize by type
    # {'cell': '13', 'yesCell': '130', 'noCell': '-99', 'op': '__!'}
    # assume all verbs are tests
    ans = objj['v']["__!"](objj,trace)
    ret = ans[0]
    objj = ans[1]
    trace = ans[2]
    if (ret == 0):
        NextPoint = 130
    elif (ret == -1):
        NextPoint = -99
    else:
        NextPoint = ret
    #endif
    retbox[0]= NextPoint
    return(retbox)
  # end def BPXG1_proc13 
  
  def BPXG1_proc12(self,objj,trace):
    if trace == 1:
      xx = raw_input ( 'begin BPXG1_proc12') 
    retbox = [0,objj,trace] # initilize by type
    # {'cell': '12', 'yesCell': '120', 'noCell': '-99', 'op': '__dup'}
    # assume all verbs are tests
    ans = objj['v']["__dup"](objj,trace)
    ret = ans[0]
    objj = ans[1]
    trace = ans[2]
    if (ret == 0):
        NextPoint = 120
    elif (ret == -1):
        NextPoint = -99
    else:
        NextPoint = ret
    #endif
    retbox[0]= NextPoint
    return(retbox)
  # end def BPXG1_proc12 
  
  def BPXG1_proc15(self,objj,trace):
    if trace == 1:
      xx = raw_input ( 'begin BPXG1_proc15') 
    retbox = [0,objj,trace] # initilize by type
    # {'cell': '15', 'yesCell': '50', 'noCell': '-99', 'op': '__drop'}
    # assume all verbs are tests
    ans = objj['v']["__drop"](objj,trace)
    ret = ans[0]
    objj = ans[1]
    trace = ans[2]
    if (ret == 0):
        NextPoint = 50
    elif (ret == -1):
        NextPoint = -99
    else:
        NextPoint = ret
    #endif
    retbox[0]= NextPoint
    return(retbox)
  # end def BPXG1_proc15 
  
  def BPXG1_proc14(self,objj,trace):
    if trace == 1:
      xx = raw_input ( 'begin BPXG1_proc14') 
    retbox = [0,objj,trace] # initilize by type
    # {'cell': '14', 'yesCell': '15', 'noCell': '-99', 'op': '__pword'}
    # assume all verbs are tests
    ans = objj['v']["__pword"](objj,trace)
    ret = ans[0]
    objj = ans[1]
    trace = ans[2]
    if (ret == 0):
        NextPoint = 15
    elif (ret == -1):
        NextPoint = -99
    else:
        NextPoint = ret
    #endif
    retbox[0]= NextPoint
    return(retbox)
  # end def BPXG1_proc14 
  
  def BPXG1_proc17(self,objj,trace):
    if trace == 1:
      xx = raw_input ( 'begin BPXG1_proc17') 
    retbox = [0,objj,trace] # initilize by type
    # {'cell': '17', 'yesCell': '-90', 'noCell': '-99', 'op': '$unexpected eof'}
    # assume all verbs are tests
    ans = objj['v']["$unexpected eof"](objj,trace)
    ret = ans[0]
    objj = ans[1]
    trace = ans[2]
    if (ret == 0):
        NextPoint = -90
    elif (ret == -1):
        NextPoint = -99
    else:
        NextPoint = ret
    #endif
    retbox[0]= NextPoint
    return(retbox)
  # end def BPXG1_proc17 
  
  def BPXG1_proc16(self,objj,trace):
    if trace == 1:
      xx = raw_input ( 'begin BPXG1_proc16') 
    retbox = [0,objj,trace] # initilize by type
    # {'cell': '16', 'yesCell': '17', 'noCell': '18', 'op': '==eof'}
    # assume all verbs are tests
    ans = objj['v']["==eof"](objj,trace)
    ret = ans[0]
    objj = ans[1]
    trace = ans[2]
    if (ret == 0):
        NextPoint = 17
    elif (ret == -1):
        NextPoint = 18
    else:
        NextPoint = ret
    #endif
    retbox[0]= NextPoint
    return(retbox)
  # end def BPXG1_proc16 
  
  def BPXG1_proc18(self,objj,trace):
    if trace == 1:
      xx = raw_input ( 'begin BPXG1_proc18') 
    retbox = [0,objj,trace] # initilize by type
    # {'cell': '18', 'yesCell': '9', 'noCell': '-99', 'op': '__nop'}
    # assume all verbs are tests
    ans = objj['v']["__nop"](objj,trace)
    ret = ans[0]
    objj = ans[1]
    trace = ans[2]
    if (ret == 0):
        NextPoint = 9
    elif (ret == -1):
        NextPoint = -99
    else:
        NextPoint = ret
    #endif
    retbox[0]= NextPoint
    return(retbox)
  # end def BPXG1_proc18 
  
  def BPXG1_proc2100(self,objj,trace):
    if trace == 1:
      xx = raw_input ( 'begin BPXG1_proc2100') 
    retbox = [0,objj,trace] # initilize by type
    # {'cell': '2100', 'yesCell': '215', 'noCell': '-99', 'op': '__!'}
    # assume all verbs are tests
    ans = objj['v']["__!"](objj,trace)
    ret = ans[0]
    objj = ans[1]
    trace = ans[2]
    if (ret == 0):
        NextPoint = 215
    elif (ret == -1):
        NextPoint = -99
    else:
        NextPoint = ret
    #endif
    retbox[0]= NextPoint
    return(retbox)
  # end def BPXG1_proc2100 
  
  def BPXG1_proc4200(self,objj,trace):
    if trace == 1:
      xx = raw_input ( 'begin BPXG1_proc4200') 
    retbox = [0,objj,trace] # initilize by type
    # {'cell': '4200', 'yesCell': '430', 'noCell': '-99', 'op': '//3100//430//'}
    # assume all verbs are tests
    ans = objj['v']["//3100//430//"](objj,trace)
    ret = ans[0]
    objj = ans[1]
    trace = ans[2]
    if (ret == 0):
        NextPoint = 430
    elif (ret == -1):
        NextPoint = -99
    else:
        NextPoint = ret
    #endif
    retbox[0]= NextPoint
    return(retbox)
  # end def BPXG1_proc4200 
  
  def BPXG1_proc3104(self,objj,trace):
    if trace == 1:
      xx = raw_input ( 'begin BPXG1_proc3104') 
    retbox = [0,objj,trace] # initilize by type
    # {'cell': '3104', 'yesCell': '3105', 'noCell': '-99', 'op': '__!'}
    # assume all verbs are tests
    ans = objj['v']["__!"](objj,trace)
    ret = ans[0]
    objj = ans[1]
    trace = ans[2]
    if (ret == 0):
        NextPoint = 3105
    elif (ret == -1):
        NextPoint = -99
    else:
        NextPoint = ret
    #endif
    retbox[0]= NextPoint
    return(retbox)
  # end def BPXG1_proc3104 
  
  def BPXG1_proc3105(self,objj,trace):
    if trace == 1:
      xx = raw_input ( 'begin BPXG1_proc3105') 
    retbox = [0,objj,trace] # initilize by type
    # {'cell': '3105', 'yesCell': '-1', 'noCell': '-99', 'op': '__callend'}
    # assume all verbs are tests
    ans = objj['v']["__callend"](objj,trace)
    ret = ans[0]
    objj = ans[1]
    trace = ans[2]
    if (ret == 0):
        NextPoint = -1
    elif (ret == -1):
        NextPoint = -99
    else:
        NextPoint = ret
    #endif
    retbox[0]= NextPoint
    return(retbox)
  # end def BPXG1_proc3105 
  
  def BPXG1_proc3100(self,objj,trace):
    if trace == 1:
      xx = raw_input ( 'begin BPXG1_proc3100') 
    retbox = [0,objj,trace] # initilize by type
    # {'cell': '3100', 'yesCell': '3101', 'noCell': '-99', 'op': '__dup'}
    # assume all verbs are tests
    ans = objj['v']["__dup"](objj,trace)
    ret = ans[0]
    objj = ans[1]
    trace = ans[2]
    if (ret == 0):
        NextPoint = 3101
    elif (ret == -1):
        NextPoint = -99
    else:
        NextPoint = ret
    #endif
    retbox[0]= NextPoint
    return(retbox)
  # end def BPXG1_proc3100 
  
  def BPXG1_proc3101(self,objj,trace):
    if trace == 1:
      xx = raw_input ( 'begin BPXG1_proc3101') 
    retbox = [0,objj,trace] # initilize by type
    # {'cell': '3101', 'yesCell': '3102', 'noCell': '-99', 'op': '__@'}
    # assume all verbs are tests
    ans = objj['v']["__@"](objj,trace)
    ret = ans[0]
    objj = ans[1]
    trace = ans[2]
    if (ret == 0):
        NextPoint = 3102
    elif (ret == -1):
        NextPoint = -99
    else:
        NextPoint = ret
    #endif
    retbox[0]= NextPoint
    return(retbox)
  # end def BPXG1_proc3101 
  
  def BPXG1_proc3102(self,objj,trace):
    if trace == 1:
      xx = raw_input ( 'begin BPXG1_proc3102') 
    retbox = [0,objj,trace] # initilize by type
    # {'cell': '3102', 'yesCell': '3103', 'noCell': '-99', 'op': '__++'}
    # assume all verbs are tests
    ans = objj['v']["__++"](objj,trace)
    ret = ans[0]
    objj = ans[1]
    trace = ans[2]
    if (ret == 0):
        NextPoint = 3103
    elif (ret == -1):
        NextPoint = -99
    else:
        NextPoint = ret
    #endif
    retbox[0]= NextPoint
    return(retbox)
  # end def BPXG1_proc3102 
  
  def BPXG1_proc3103(self,objj,trace):
    if trace == 1:
      xx = raw_input ( 'begin BPXG1_proc3103') 
    retbox = [0,objj,trace] # initilize by type
    # {'cell': '3103', 'yesCell': '3104', 'noCell': '-99', 'op': '__swap'}
    # assume all verbs are tests
    ans = objj['v']["__swap"](objj,trace)
    ret = ans[0]
    objj = ans[1]
    trace = ans[2]
    if (ret == 0):
        NextPoint = 3104
    elif (ret == -1):
        NextPoint = -99
    else:
        NextPoint = ret
    #endif
    retbox[0]= NextPoint
    return(retbox)
  # end def BPXG1_proc3103 
  
  def BPXG1_proc320(self,objj,trace):
    if trace == 1:
      xx = raw_input ( 'begin BPXG1_proc320') 
    retbox = [0,objj,trace] # initilize by type
    # {'cell': '320', 'yesCell': '3200', 'noCell': '-99', 'op': '$vn'}
    # assume all verbs are tests
    ans = objj['v']["$vn"](objj,trace)
    ret = ans[0]
    objj = ans[1]
    trace = ans[2]
    if (ret == 0):
        NextPoint = 3200
    elif (ret == -1):
        NextPoint = -99
    else:
        NextPoint = ret
    #endif
    retbox[0]= NextPoint
    return(retbox)
  # end def BPXG1_proc320 
  
  def BPXG1_proc5(self,objj,trace):
    if trace == 1:
      xx = raw_input ( 'begin BPXG1_proc5') 
    retbox = [0,objj,trace] # initilize by type
    # {'cell': '5', 'yesCell': '6', 'noCell': '-99', 'op': '__ask'}
    # assume all verbs are tests
    ans = objj['v']["__ask"](objj,trace)
    ret = ans[0]
    objj = ans[1]
    trace = ans[2]
    if (ret == 0):
        NextPoint = 6
    elif (ret == -1):
        NextPoint = -99
    else:
        NextPoint = ret
    #endif
    retbox[0]= NextPoint
    return(retbox)
  # end def BPXG1_proc5 
  
  def BPXG1_proc325(self,objj,trace):
    if trace == 1:
      xx = raw_input ( 'begin BPXG1_proc325') 
    retbox = [0,objj,trace] # initilize by type
    # {'cell': '325', 'yesCell': '82', 'noCell': '-99', 'op': '__writeBPXEofRecord'}
    # assume all verbs are tests
    ans = objj['v']["__writeBPXEofRecord"](objj,trace)
    ret = ans[0]
    objj = ans[1]
    trace = ans[2]
    if (ret == 0):
        NextPoint = 82
    elif (ret == -1):
        NextPoint = -99
    else:
        NextPoint = ret
    #endif
    retbox[0]= NextPoint
    return(retbox)
  # end def BPXG1_proc325 
  
  def BPXG1_proc9(self,objj,trace):
    if trace == 1:
      xx = raw_input ( 'begin BPXG1_proc9') 
    retbox = [0,objj,trace] # initilize by type
    # {'cell': '9', 'yesCell': '10', 'noCell': '-99', 'op': '__pword'}
    # assume all verbs are tests
    ans = objj['v']["__pword"](objj,trace)
    ret = ans[0]
    objj = ans[1]
    trace = ans[2]
    if (ret == 0):
        NextPoint = 10
    elif (ret == -1):
        NextPoint = -99
    else:
        NextPoint = ret
    #endif
    retbox[0]= NextPoint
    return(retbox)
  # end def BPXG1_proc9 
  
  def BPXG1_proc200(self,objj,trace):
    if trace == 1:
      xx = raw_input ( 'begin BPXG1_proc200') 
    retbox = [0,objj,trace] # initilize by type
    # {'cell': '200', 'yesCell': '210', 'noCell': '-99', 'op': '__pword'}
    # assume all verbs are tests
    ans = objj['v']["__pword"](objj,trace)
    ret = ans[0]
    objj = ans[1]
    trace = ans[2]
    if (ret == 0):
        NextPoint = 210
    elif (ret == -1):
        NextPoint = -99
    else:
        NextPoint = ret
    #endif
    retbox[0]= NextPoint
    return(retbox)
  # end def BPXG1_proc200 
  
  def BPXG1_proc610(self,objj,trace):
    if trace == 1:
      xx = raw_input ( 'begin BPXG1_proc610') 
    retbox = [0,objj,trace] # initilize by type
    # {'cell': '610', 'yesCell': '62', 'noCell': '-99', 'op': '__!'}
    # assume all verbs are tests
    ans = objj['v']["__!"](objj,trace)
    ret = ans[0]
    objj = ans[1]
    trace = ans[2]
    if (ret == 0):
        NextPoint = 62
    elif (ret == -1):
        NextPoint = -99
    else:
        NextPoint = ret
    #endif
    retbox[0]= NextPoint
    return(retbox)
  # end def BPXG1_proc610 
  
  def BPXG1_proc75(self,objj,trace):
    if trace == 1:
      xx = raw_input ( 'begin BPXG1_proc75') 
    retbox = [0,objj,trace] # initilize by type
    # {'cell': '75', 'yesCell': '750', 'noCell': '-99', 'op': '$bad Format no ( :- ) '}
    # assume all verbs are tests
    ans = objj['v']["$bad Format no ( :- ) "](objj,trace)
    ret = ans[0]
    objj = ans[1]
    trace = ans[2]
    if (ret == 0):
        NextPoint = 750
    elif (ret == -1):
        NextPoint = -99
    else:
        NextPoint = ret
    #endif
    retbox[0]= NextPoint
    return(retbox)
  # end def BPXG1_proc75 
  
  def BPXG1_proc74(self,objj,trace):
    if trace == 1:
      xx = raw_input ( 'begin BPXG1_proc74') 
    retbox = [0,objj,trace] # initilize by type
    # {'cell': '74', 'yesCell': '-1', 'noCell': '-99', 'op': '__callend'}
    # assume all verbs are tests
    ans = objj['v']["__callend"](objj,trace)
    ret = ans[0]
    objj = ans[1]
    trace = ans[2]
    if (ret == 0):
        NextPoint = -1
    elif (ret == -1):
        NextPoint = -99
    else:
        NextPoint = ret
    #endif
    retbox[0]= NextPoint
    return(retbox)
  # end def BPXG1_proc74 
  
  def BPXG1_proc73(self,objj,trace):
    if trace == 1:
      xx = raw_input ( 'begin BPXG1_proc73') 
    retbox = [0,objj,trace] # initilize by type
    # {'cell': '73', 'yesCell': '74', 'noCell': '-99', 'op': '//80//74//'}
    # assume all verbs are tests
    ans = objj['v']["//80//74//"](objj,trace)
    ret = ans[0]
    objj = ans[1]
    trace = ans[2]
    if (ret == 0):
        NextPoint = 74
    elif (ret == -1):
        NextPoint = -99
    else:
        NextPoint = ret
    #endif
    retbox[0]= NextPoint
    return(retbox)
  # end def BPXG1_proc73 
  
  def BPXG1_proc72(self,objj,trace):
    if trace == 1:
      xx = raw_input ( 'begin BPXG1_proc72') 
    retbox = [0,objj,trace] # initilize by type
    # {'cell': '72', 'yesCell': '73', 'noCell': '-99', 'op': '__drop'}
    # assume all verbs are tests
    ans = objj['v']["__drop"](objj,trace)
    ret = ans[0]
    objj = ans[1]
    trace = ans[2]
    if (ret == 0):
        NextPoint = 73
    elif (ret == -1):
        NextPoint = -99
    else:
        NextPoint = ret
    #endif
    retbox[0]= NextPoint
    return(retbox)
  # end def BPXG1_proc72 
  
  def BPXG1_proc71(self,objj,trace):
    if trace == 1:
      xx = raw_input ( 'begin BPXG1_proc71') 
    retbox = [0,objj,trace] # initilize by type
    # {'cell': '71', 'yesCell': '72', 'noCell': '75', 'op': '==:-'}
    # assume all verbs are tests
    ans = objj['v']["==:-"](objj,trace)
    ret = ans[0]
    objj = ans[1]
    trace = ans[2]
    if (ret == 0):
        NextPoint = 72
    elif (ret == -1):
        NextPoint = 75
    else:
        NextPoint = ret
    #endif
    retbox[0]= NextPoint
    return(retbox)
  # end def BPXG1_proc71 
  
  def BPXG1_proc70(self,objj,trace):
    if trace == 1:
      xx = raw_input ( 'begin BPXG1_proc70') 
    retbox = [0,objj,trace] # initilize by type
    # {'cell': '70', 'yesCell': '71', 'noCell': '-99', 'op': '__pword'}
    # assume all verbs are tests
    ans = objj['v']["__pword"](objj,trace)
    ret = ans[0]
    objj = ans[1]
    trace = ans[2]
    if (ret == 0):
        NextPoint = 71
    elif (ret == -1):
        NextPoint = -99
    else:
        NextPoint = ret
    #endif
    retbox[0]= NextPoint
    return(retbox)
  # end def BPXG1_proc70 
  
  def BPXG1_proc950(self,objj,trace):
    if trace == 1:
      xx = raw_input ( 'begin BPXG1_proc950') 
    retbox = [0,objj,trace] # initilize by type
    # {'cell': '950', 'yesCell': '227', 'noCell': '-99', 'op': '//3100//227//'}
    # assume all verbs are tests
    ans = objj['v']["//3100//227//"](objj,trace)
    ret = ans[0]
    objj = ans[1]
    trace = ans[2]
    if (ret == 0):
        NextPoint = 227
    elif (ret == -1):
        NextPoint = -99
    else:
        NextPoint = ret
    #endif
    retbox[0]= NextPoint
    return(retbox)
  # end def BPXG1_proc950 
  
  def BPXG1_proc800(self,objj,trace):
    if trace == 1:
      xx = raw_input ( 'begin BPXG1_proc800') 
    retbox = [0,objj,trace] # initilize by type
    # {'cell': '800', 'yesCell': '9', 'noCell': '-99', 'op': '__initFioi'}
    # assume all verbs are tests
    ans = objj['v']["__initFioi"](objj,trace)
    ret = ans[0]
    objj = ans[1]
    trace = ans[2]
    if (ret == 0):
        NextPoint = 9
    elif (ret == -1):
        NextPoint = -99
    else:
        NextPoint = ret
    #endif
    retbox[0]= NextPoint
    return(retbox)
  # end def BPXG1_proc800 
  
  

  
  # helper definitions
  # use stump for navagation traceing
  def stump(self,objj,trace):
    retbox = [0,objj,trace] # initilize by type
    xx = raw_input("stump")
    ans = raw_input("pass/fail/goto 0/-1 or next ")
    retbox.append( int(ans) )
    return(retbox)
  #end stump
  
  def trace(self,msg,objj):
    x = raw_input(msg + "... ")
    while (x != ''):
		if (x.upper() == "DS"):
			print(objj['ds'].dump())
		elif (x.upper() == "PS"):
			print(objj['ps'].dump())
		elif (x.upper() == "ES"):
			print(objj['es'].dump())
		elif (x.upper() == "NDS"):
			print(objj['nds'].dump())
		elif (x.upper() == "OBJJ"):
			print(objj)
		else:
			x = ''
		#endif
		x = raw_input("... ")
    #wend
  #end trace
  
  # use dump for command line development
  def dump(self,objj,trace):
    return(objj)
  #end dump
  
# end class BPXG1
  