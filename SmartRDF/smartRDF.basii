/* 
file smartRDF.basii
pja 01-31-2020 new rules
[[1]]s=* pred=has ob; 
          resolve(ob) ; RDF['thing'][ob] # add obj to thing list
[[2]] s <>* & thing[s] exists pred=has ob ; 
          resolve(ob) RDF['thing'][ob] , RDF[s][ob]
[[3]]s='predicate' pred='gets' ob 
          RDF['predicate'][pred]
[[4]] s<>*,"predicate" & thing[s] exists pred<>"has","gets","is"
          resolve(ob) , RDF[s][p][ob] RDF['thing'][ob]
pja 01-30-2020
entry sets up tuple
rules are applied all elements of tuple are exposed in NDS

pja 01-24-2020 begin again
subject syntax
[{name1.}]name2{"[" [{name3.}] name4 "]"}
SPO (thing has name1 ) produces 
- RDF["thing"]["has"]["name1"]
- RDF["name1"]["parent"]["thing"]
SPO(name1 has name2) produces
- RDF["thing"]["has"]["name2"]
- RDF["name1"]["has"]["name2"]
- RDF["name2"]["parent"]["name1"]
SPO(name2 instance name4) produces
- RDF["name2"]["instance"]["name4"]
- RDF["thing"]["has"]["name4"]
SPO(name3 has name4)
- RDF["name3"]["has"]["name4"]
- RDF["name4"]["parent"]["name3"]

kitty has fortunata is marie has Cathy has joe is bigJoe has joe is LittleJoe; joe has dualCit [ USA , italy ]

- RDF["thing"]["has"]["kitty"]
- RDF["kitty"]["parent"]["thing"]
kitty has fortunata
- RDF["kitty"]["has"]["fortunata"]
- RDF["thing"]["has"]["fortunata"]
- RDF["fortunata"]["parent"]["kitty"]

fortunata is marie
- RDF["fortunata"]["is"]["marie"]
- RDF["thing"]["has"]["marie"]

marie has Cathy
Cathy has joe
joe is bigJoe
bigJoe has joe
joe is LittleJoe
joe has dualCit
joe has dualCit [ USA
joe has dualCit [ italy
*/

def Rmain :-
[[ 1 ]] initRDF getSubject getPredicate getObject r2 e @ 0 = tail. .
;
def initRDF :-
[[ 1 ]] "arV" takeV dr0 "RDF" ! 
ch0 '' "thing" "thing" "RDF" @ drvx /* RDF['thing']['thing'] ='' */ 
"RDF" !
ch0 '' "has" "predicate" "RDF" @ drvx 
/* RDF['predicate']['has'] ='' */ 
"RDF" !
ch0 '' "gets" "predicate" "RDF" @ drvx 
/* RDF['predicate']['gets'] ='' */ 
"RDF" !
;

def getSubject :-
[[ 1 ]] "subject " ask "subject" ! .
;
def getPredicate :-
[[ 1 ]] "predicate " ask "predicate" ! .
;
def getObject :-
[[ 1 ]] "object " ask "object" ! .
;
def r2 :-
/* ((s=*,s="predicate" , pred="gets" pred="has" , pred="is , t[s] exists")) */
[[ 1 ]] "0" "s=Star" ! "subject" @ "*" = "1" "s=Star" ! ... . 
[[ 2 ]] "0" "s=pred" ! "subject" @ "predicate" = "1" "s=pred" ! ... . 
[[ 3 ]]  "0" "p=gets" ! "predicate" @ "gets" = "1" "p=gets" ! ... . 
[[ 4 ]] "0" "p=has" ! "predicate" @ "has" = "1" "p=has" ! ... . 
[[ 5 ]] "0" "p=is" ! "predicate" @ "is" = "1" "p=is" ! ... . 
[[ 6 ]] "0" "p=gets" ! tsExists "1" "p=gets" ! ... .
[[ 7 ]] r3 .
;
def r3 :-
/* apply the rules */
[[ 1 ]] /* s=* and pred=has -> resolv(ob) RDF['thing'][obj] ='' */
        "s=Star" @ "1" = "p-has" @ "1" = 
def tsExists :-
/* (na,,) ok/nok */
[[ 1 ]] "thing" "RDF" @ dr? dr? drop . /* ok */
; /* else fail */

@endend @endend

