/* 
file smartRDF.basii
pja 02-16-2020 new rules
-- on entry
--- if old to thing list save name on collision-list
--- format [[1]] subject OR (s-subject , s-predicate , s-object )
---- [[2]] predicate OR (p-subject , p-predicate , p-object )
---- [[3]] object OR (o-subject , o-predicate , o-object )
--- all subjects and objects follow collision rule

-- after process is to enter into thing-list dangling subjects (new things)
-- after process is to enter into predicate dangling predicates
-- after process is to disambiguate collisions by provenance 

tests as table has (value with value2)

b has (bundle1 with device1)
br has (bundle1 with Rule1)
Rule has Rule1
Rule1[Threshold] is 65
rt has (Rule1[1] with testD1)

pja 01-31-2020 new rules
[[1]]s=* pred=has ob; 
          resolve(ob) ; RDF['thing'][ob] # add obj to thing list
[[2]] s <>* & thing[s] exists pred=has ob ; 
          resolve(ob) RDF['thing'][ob] , RDF[s][ob]
[[3]]s='predicate' pred='gets' ob 
          RDF['predicate'][pred]
[[4]] s<>*,"predicate" & thing[s] exists pred<>"has","gets","is"
          resolve(ob) , RDF[s][p][ob] RDF['thing'][ob]
pja 01-30-2020
entry sets up tuple
rules are applied all elements of tuple are exposed in NDS

pja 01-24-2020 begin again
subject syntax
[{name1.}]name2{"[" [{name3.}] name4 "]"}
SPO (thing has name1 ) produces 
- RDF["thing"]["has"]["name1"]
- RDF["name1"]["parent"]["thing"]
SPO(name1 has name2) produces
- RDF["thing"]["has"]["name2"]
- RDF["name1"]["has"]["name2"]
- RDF["name2"]["parent"]["name1"]
SPO(name2 instance name4) produces
- RDF["name2"]["instance"]["name4"]
- RDF["thing"]["has"]["name4"]
SPO(name3 has name4)
- RDF["name3"]["has"]["name4"]
- RDF["name4"]["parent"]["name3"]

kitty has fortunata is marie has Cathy has joe is bigJoe has joe is LittleJoe; joe has dualCit [ USA , italy ]

- RDF["thing"]["has"]["kitty"]
- RDF["kitty"]["parent"]["thing"]
kitty has fortunata
- RDF["kitty"]["has"]["fortunata"]
- RDF["thing"]["has"]["fortunata"]
- RDF["fortunata"]["parent"]["kitty"]

fortunata is marie
- RDF["fortunata"]["is"]["marie"]
- RDF["thing"]["has"]["marie"]

marie has Cathy
Cathy has joe
joe is bigJoe
bigJoe has joe
joe is LittleJoe
joe has dualCit
joe has dualCit [ USA
joe has dualCit [ italy
*/
s2020.py
def Rmain :-
[[ 1 ]] initRDF Rmain2 .
;

def Rmain2 :- 
[[ 1 ]] t0 getSubject "subject" @ "done" = wait .
[[ 2 ]] getPredicate  getObject  /* r2 e @ 0 = */ tail.   .
;

def initRDF :-
[[ 1 ]] "tempNDSV" takeV 
"arV" takeV dr0 "RDF" ! 
/* set up RDF array RDF['thing'] */
ch0 '' "thing" "thing" "RDF" @ drvx /* RDF['thing']['thing'] ='' */
"RDF" ! 
/* set up RDF array RDF['predicate'] */
ch0 '' "has" "predicate" "RDF" @ drvx  /* RDF['predicate']['has'] ='' */ 
"RDF" !
ch0 '' "gets" "predicate" "RDF" @ drvx 
/* RDF['predicate']['gets'] ='' */ 
"RDF" !
/* set up RDF array RDF['collision'] */
ch0 '' "" "collision" "RDF" @ drvx  "RDF" !
/* set up RDF array RDF['statement'] */
ch0 '' "" "statement" "RDF" @ drvx  "RDF" !
.
;

def getSubject :-
[[ 1 ]] "subject " ask "tsubject" t! ... .
/* process subject "(" s-.. ")" */
[[ 2 ]] "tsubject" t@ word "(" = complexSubject .
[[ 3 ]] "tsubject" t@ "subject" ! 
.
;
def complexSubject :-
[[ 1 ]] word "s-subject" t!
word "s-predicate" t!
word "s-object" t!
drop
/* add complex to RDF */
ch0 "" "tsubject" t@ "thing" "RDF" @ drvx "RDF" !
.
;
/* predicate */
def getPredicate :-
[[ 1 ]] "predicate " ask "tpredicate" t! ... .
/* process predicate "(" s-.. ")" */
[[ 2 ]] "tpredicate" t@ word "(" = complexPredicate .
[[ 3 ]] "tpredicate" t@ "predicate" ! 
.
;
def complexPredicate :-
[[ 1 ]] word "p-subject" t!
word "p-predicate" t!
word "p-object" t!
drop
/* add complex to RDF */
ch0 "" "tpredicate" t@ "predicate" "RDF" @ drvx "RDF" !
.
;
/* object */
def getObject :-
[[ 1 ]] "Object " ask "tObject" t! ... .
/* process Object "(" s-.. ")" */
[[ 2 ]] "tObject" t@ word "(" = complexObject .
[[ 3 ]] "tObject" t@ "Object" ! wait
.
;

def complexObject :-
[[ 1 ]] word "o-subject" t!
word "o-predicate" t!
word "o-object" t!
drop
/* add complex to RDF */
ch0 "" "tpredicate" t@ "thing" "RDF" @ drvx "RDF" !
wait
.
;

def wait :-
[[ 1 ]] .t dumpNDS .s "??" ask .
;

/* -- */


@endend @endend @endend

