/*
file BPX.basii
pja 03-07-2020
BPX is the compiler into lib records
PGF is the executor 

g: def hw :- [[ 1 ]] "hello world" msg . ; ;;
r: .l
{hw {1!!1 : lit!!hello world}}
{hw {1!!2 : msg!!}}
{hw {1!!3 : .!!}}
{hw {2!!1 : ;!!}}

needs testing 
- hello
{{
def hw :- [[ 1 ]] "hello world" msg . ; ;;
}}
BPX

-- 
- call 1

format [def BPXpn :- clauses till ;] till ;;
clauses ["[[" BPXcn "]]" verbs till .]
verbs // paragraph to call
      . to end
      quoted string
      number
using lib! verbs 
lib! ((pn, cn!!vn,  vt!!para1))

*/
BPX.py
def BPXMain :-
[[ 1 ]] BPXInit doParagraph .
;
def BPXInit :-
[[ 1 ]] "init none " msg .
;

def doParagraph :-
/* def name :- // do clauses tail. OR ;; and end */
/* (paragraphString,,) */
[[ 1 ]] word "px" ! ... .
[[ 2 ]] "px" @ ";;" =  BPXFinal .
[[ 3 ]] "0" "e" ! 
        "px" @  "def" =  
        word "BPXpn" ! 
        "1" "e" ! word ":-" = 
        "0" "BPXcn" !
        doClauses tail. .
[[ 4 ]] "e" @ "0" = "expected def" msg .
[[ 5 ]] "e" @ "1" = "expected :- " msg .
;

def doClauses :-
/* [[ n ]] [BPXvt till .] or ; */
[[ 1 ]] word "cx" ! ... .
[[ 2 ]] "cx" @ ";" = 
        "cx" @ 'BPXvt'!
        "" "BPXpara1" !
        writeBPX 
    .
        
[[ 3 ]] "0" "e" ! "cx" @  "[[" = word "BPXcn" !
        "1" "e" ! word "]]" = "0" "BPXvn" ! doBPXvt tail. .
[[ 4 ]] "e" @ "0" = " expected [[ " msg .
[[ 5 ]] "e" @ "1" = " expected ]] " msg .
;

def doBPXvt  :-
/* vn++ */
/* if quote vt = lit para1 = q-q write */
/* if num vt = num para1 = # write */
/* if num vt = // para1 = next word write */
/* else is verb vt! para1='' write */
[[ 1 ]]  'BPXvn' @++ drop
         '' 'BPXpara1' ! 
          word "BPXvt" ! ... . 
[[ 2 ]] "BPXvt" @ c1 '.' = 
        writeBPX .
[[ 3 ]] "BPXvt" @ c1 Q? 
        "BPXvt" @ woB "BPXpara1" ! 
        "lit" "BPXvt" !
         writeBPX tail. 
         .
[[ 4 ]] "BPXvt" @ c1 T?  
        "BPXvt" @ woB "BPXpara1" !
        "lit" "BPXvt" ! 
         writeBPX tail. 
         .
[[ 5 ]] "BPXvt" @ isnum?  
        "BPXvt" @ "BPXpara1" !
        "num" "BPXvt" !
         writeBPX tail. 
         .
[[ 6 ]] "BPXvt" @ "//" = word "BPXpara1" !
         writeBPX tail. 
         .
[[ 7 ]]  '' "BPXpara1" !
         writeBPX tail. 
         .
;
def writeBPX :-
/* format 
for lib! r,c,v as {r{c} = v} so pn{cn!!vn} vt!!para1
 */
[[ 1 ]]   
    "BPXpn" @  
    "BPXcn" @ "!!" cat "BPXvn" @ 
    "BPXvt" @ cat "!!" cat "BPXpara1" @ cat 
    lib!
    .
;

def BPXFinal :-
[[ 1 ]] "BPXFinal" msg .s "?" ask .
;

@endend @endend
         


