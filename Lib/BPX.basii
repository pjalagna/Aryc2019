/*
file BPX.basii
pja 03-07-2020
needs testing 
- hello
- call 1

format [def BPXpn :- clauses till ;] till ;;
clauses ["[[" BPXcn "]]" verbs till .]
verbs // paragraph to call
      . to end
      quoted string
      number
BPXRecord      BPX: BPXpn BPXcn BPXvn BPXvt BPXpara1 ::
paragraph list PAR: BPXpn ::

*/
BPX.py
def BPXMain :-
[[ 1 ]] BPXInit doParagraph .
;
def BPXInit :-
[[ 1 ]] "init none " msg .
;

def doParagraph :-
[[ 1 ]] word "px" ! ... .
[[ 2 ]] "px" @ ";;" =  BPXFinal .
[[ 3 ]] "0" "e" ! 
        "px" @  "def" =  
        word "BPXpn" ! 
        writePAR
        "1" "e" ! word ":-" = 
        "0" "BPXcn" !
        doClauses tail. .
[[ 4 ]] "e" @ "0" = "expected def" msg .
[[ 5 ]] "e" @ "1" = "expected :- " msg .
;

def doClauses :-
/* [[ n ]] [BPXvt till .] or ; */
[[ 1 ]] word "cx" ! ... .
[[ 2 ]] "cx" @ ";" = 
        "cx" @ "BPXvt" ! 
        "BPXcn" @ ++ "BPXcn" !
        "1" "BPXvn" !
        writeBPX .
        
[[ 3 ]] "0" "e" ! "cx" @  "[[" = word "BPXcn" !
        "1" "e" ! word "]]" = "0" "BPXvn" ! doBPXvt tail. .
[[ 4 ]] "e" @ "0" = " expected [[ " msg .
[[ 5 ]] "e" @ "1" = " expected ]] " msg .
;
def doBPXvt  :-
[[ 1 ]]  word "BPXvt" ! ... . 
[[ 2 ]] "BPXvt" @ ".." c1 = 
        "BPXvn" @ ++ "BPXvn" !
        writeBPX .
[[ 3 ]] "BPXvt" @ c1 Q? 
        "BPXvt" @ woB "BPXpara1" ! 
        "lit" "BPXvt" !
        "BPXvn" @ ++ "BPXvn" !
         writeBPX tail. .
[[ 4 ]] "BPXvt" @ c1 T?  
        "BPXvt" @ woB "BPXpara1" !
        "lit" "BPXvt" ! 
        "BPXvn" @ ++ "BPXvn" !
         writeBPX tail. .
[[ 5 ]] "BPXvt" @ isnum?  
        "BPXvt" @ "BPXpara1" !
        "num" "BPXvt" !
        "BPXvn" @ ++ "BPXvn" !
         writeBPX tail. .
[[ 6 ]] "BPXvt" @ "//" = word "BPXpara1" !
        "BPXvn" @ ++ "BPXvn" !
         writeBPX tail. .
[[ 7 ]]  "BPXvn" @ ++ "BPXvn" !
         writeBPX tail. .
;
def writeBPX :-
[[ 1 ]]    "BPX:" 
    "BPXpn" @ cats 
    "BPXcn" @ cats 
    "BPXvn" @ cats 
    "BPXvt" @ cats
    "BPXpara1" @ cats "::" cats msg 
    "" "BPXpara1" !
    .
;
def writePAR :-
[[ 1 ]] "PAR:" "BPXpn" @ cats "::" cats msg .
;
def BPXFinal :-
[[ 1 ]] "BPXFinal" msg .s "?" ask .
;

@endend @endend
         


